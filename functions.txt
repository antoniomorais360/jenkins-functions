
export ownip=$(hostname -I | awk '{print $1}')

function aws_iid_tagname() {
	aws_iid_tagname=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$1" \
	--output text --query 'Reservations[*].Instances[*].InstanceId')
	echo $aws_iid_tagname
}

function aws_running_instances () {

aws ec2 describe-instances  \
	--filter "Name=instance-state-name,Values=running" \
	--query "Reservations[*].Instances[*].[InstanceId, PrivateIpAddress, PublicIpAddress, InstanceType, State.Name, Tags[?Key=='Name'].Value|[0],Tags[?Key=='SO'].Value|[0], Platform]" \
	--output text 

}

function aws_elastic_ips () {

aws ec2 describe-addresses \
	--query 'Addresses[].{ instanceId: InstanceId, publicIp: PublicIp, allocationId: AllocationId, associationId: AssociationId, zone: NetworkBorderGroup }' \
	--output text 

}

function run_aws_variables_instances() {

	ret=$?
	if [ $ret -ne 0 ]; then
		echo Atualizando aws-variaveis-instancias
		curl -X POST http://$USERNAME:$TOKEN@localhost:8080/job/aws-variaveis-instancias/build?token=$TOKENJOB
		exit 1
	fi

}

function check_cpu () {
#Requirement: apt install -y sysstat (mpstat)
#Example: 	check_cpu ip linux_user 
#			check_cpu 192.168.0.1 ubuntu
 
ipnumber=$1
linux_user=$2
linux_user=${linux_user:-ubuntu}


#CPU variables
test_duration=5


	cpu_idle=$(sudo -u $linux_user ssh -o StrictHostKeyChecking=no $ipnumber mpstat $test_duration 1 | tail -1 |awk '{print int($12)}')
	cpuusage=$(echo 100 - $cpu_idle | bc)
	cpuusage=$(echo ${cpuusage%,*})
	
	check_cpu=$cpuusage
	
	printf "$1 is using $cpuusage%% of CPU\n"

}

function ping_url () {
#Example: ping_url "My Site Friendly Name" https://mysite.com

sitename=$1
url2check=$2


#PING url variables
connecttimeout=20

echo 
echo Testing $1

response_code=`curl --insecure --write-out %{http_code} --silent --connect-timeout $connecttimeout --no-keepalive --output /dev/null  $url2check`

ping_url=$response_code 
  
  if [ "$response_code" != "200" ] && [ "$response_code" != "404" ] && [ "$response_code" != "401" ] && [ "$response_code" != "301" ] ; then

			printf "$1 is *** OFFLINE *** \n"
            false
  else
  	printf "$1 is ONLINE ($response_code)\n"
    echo ""
  fi;

}

function check_hdd_free_space() {

#Example: check_hdd_free_space "Wordpress" 192.168.0.1 /

instancename=$1
hostip=$2
pathvolume=$3


echo $instancename - $hostip

if [ "$hostip" = "localhost" ]; then
	
	check_hdd_free_space=$(df $pathvolume | grep -o "[0-9][0-9]"% |  grep -o "[0-9][0-9]")
else	
	check_hdd_free_space=$(sudo -u ubuntu ssh -o StrictHostKeyChecking=no -o LogLevel=error $2 df $pathvolume | grep -o "[0-9][0-9]"% |  grep -o "[0-9][0-9]" )
	
fi;	

printf "$check_hdd_free_space%%\n"

}

function check_ssl_expire() {
site=$1
PORT="443"

date --date="$(echo | openssl s_client -servername $site -connect $site:$PORT  2>/dev/null \
	| openssl x509 -noout -enddate | awk -F '=' '{print $NF}' )" --iso-8601
	
}

function run_hdd_clean_up () {

ipnumber=$1
linux_user=$2
linux_user=${linux_user:-ubuntu}

if [ "$ipnumber" == "$ownip" ]  
    then
		sudo apt -y clean && sudo apt -y autoclean && sudo apt -y autoremove
	else
      sudo -u $linux_user ssh -o LogLevel=error $ipnumber sudo apt clean && sudo apt autoclean && sudo apt autoremove  
 fi
}

function check_hdd_biggest () {

#Ex: check_hdd_biggest 

ipnumber=$1
linux_user=$2
linux_user=${linux_user:-ubuntu}

min_size_list=$3
min_size_list=${min_size_list:-20M}


if [ "$ipnumber" == "$ownip" ]  
    then
        sudo find / -not -path "/mnt/*" -not -path "/proc/*" -not -path "/swapfile" -size +$(min_size_list) -type f  -exec du -h  {} + | sort -r -h
		sudo du -hs /*  --exclude=/mnt/*  | sort -rh | head -10
	else
      sudo -u $linux_user ssh -o LogLevel=error $ipnumber sudo find / -not -path "/mnt/*" -not -path "/proc/*" -not -path "/swapfile" -size ++$(min_size_list)  -type f  -exec du -h  {} + | sort -r -h
      sudo -u $linux_user ssh -o LogLevel=error $ipnumber sudo du -hs /*  --exclude=/mnt/*  | sort -rh | head -10
 fi
    
}

function run_hdd_deletions () {

folder=$1
filename=$2
days_expiration=$3

	sudo find $folder -type f -mtime +$(days_expiration) -name $filename -exec rm -f {} \;

}

function aws_expand_hdd () {

#to be used after resize image in instance-state-name
#Ex: aws_expand_hdd nvme0n1 nvme0n1p1
dev_name=$1
dev_partition=$2

	sudo apt install cloud-guest-utils
	lsblk
	df -h
	sudo growpart /dev/$dev_name 1
	sudo resize2fs /dev/$dev_partition

}





