function aws_iid_tagname() {
	aws_iid_tagname=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$1" \
	--output text --query 'Reservations[*].Instances[*].InstanceId')
	echo $aws_iid_tagname
}

function aws_running_instances () {

aws ec2 describe-instances  \
	--filter "Name=instance-state-name,Values=running" \
	--query "Reservations[*].Instances[*].[InstanceId, PrivateIpAddress, PublicIpAddress, InstanceType, State.Name, Tags[?Key=='Name'].Value|[0],Tags[?Key=='SO'].Value|[0], Platform]" \
	--output text 

}


function aws_elastic_ips () {

aws ec2 describe-addresses \
	--query 'Addresses[].{ instanceId: InstanceId, publicIp: PublicIp, allocationId: AllocationId, associationId: AssociationId, zone: NetworkBorderGroup }' \
	--output text 

}


function check_cpu () {
#Requirement: apt install -y sysstat (mpstat)
#Example: 	check_cpu ip linux_user 
#			check_cpu 192.168.0.1 ubuntu
 
ipnumber=$1
linux_user=$2
linux_user=${linux_user:-ubuntu}


#CPU variables
test_duration=5


	cpu_idle=$(sudo -u $linux_user ssh -o StrictHostKeyChecking=no $1 mpstat $test_duration 1 | tail -1 |awk '{print int($12)}')
	cpuusage=$(echo 100 - $cpu_idle | bc)
	cpuusage=$(echo ${cpuusage%,*})
	
	check_cpu=$cpuusage
	
	printf "$1 is using $cpuusage%% of CPU\n"

}


function ping_url () {
#Example: ping_url "My Site Friendly Name" https://mysite.com

sitename=$1
url2check=$2


#PING url variables
connecttimeout=20

echo 
echo Testing $1

response_code=`curl --insecure --write-out %{http_code} --silent --connect-timeout $connecttimeout --no-keepalive --output /dev/null  $url2check`

ping_url=$response_code 
  
  if [ "$response_code" != "200" ] && [ "$response_code" != "404" ] && [ "$response_code" != "401" ] && [ "$response_code" != "301" ] ; then

			printf "$1 is *** OFFLINE *** \n"
            false
  else
  	printf "$1 is ONLINE ($response_code)\n"
    echo ""
  fi;

}


function run_aws-variaveis-instancias() {

	ret=$?
	if [ $ret -ne 0 ]; then
		echo Atualizando aws-variaveis-instancias
		curl -X POST http://$USERNAME:$TOKEN@localhost:8080/job/aws-variaveis-instancias/build?token=$TOKENJOB
		exit 1
	fi

}


function test_volume() {

#Example: test_volume "Wordpress" 192.168.0.1 /

instancename=$1
hostip=$2
pathvolume=$3


echo $instancename - $hostip

if [ "$hostip" = "localhost" ]; then
	
	test_volume=$(df $pathvolume | grep -o "[0-9][0-9]"% |  grep -o "[0-9][0-9]")
else	
	test_volume=$(sudo -u ubuntu ssh -o StrictHostKeyChecking=no -o LogLevel=error $2 df $pathvolume | grep -o "[0-9][0-9]"% |  grep -o "[0-9][0-9]" )
	
fi;	

printf "$test_volume%%\n"

}


function ssl_expire() {
site=$1
PORT="443"
openssl s_client -servername $site -connect $site:$PORT \
| openssl x509 -noout -dates 
}

