
export ownip=$(hostname -I | awk '{print $1}')

function aws_iid_tagname() {
	aws_iid_tagname=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=$1" "Name=instance-state-name,Values=running" \
	--output text --query 'Reservations[*].Instances[*].InstanceId')
	echo $aws_iid_tagname
}

function aws_running_instances () {

aws ec2 describe-instances  \
	--filter "Name=instance-state-name,Values=running" \
	--query "Reservations[*].Instances[*].[InstanceId, PrivateIpAddress, PublicIpAddress, InstanceType, State.Name, Tags[?Key=='Name'].Value|[0],Tags[?Key=='SO'].Value|[0], Platform]" \
	--output text 

}

function aws_elastic_ips () {

aws ec2 describe-addresses \
	--query 'Addresses[].{ instanceId: InstanceId, publicIp: PublicIp, allocationId: AllocationId, associationId: AssociationId, zone: NetworkBorderGroup }' \
	--output text 

}

function run_aws_variables_instances() {

	ret=$?
	if [ $ret -ne 0 ]; then
		echo Atualizando aws-variaveis-instancias
		curl -X POST http://$USERNAME:$TOKEN@localhost:8080/job/aws-variaveis-instancias/build?token=$TOKENJOB
		exit 1
	fi

}

function check_cpu () {
#Requirement: apt install -y sysstat (mpstat)
#Example: 	check_cpu ip linux_user 
#			check_cpu 192.168.0.1 ubuntu
 
ipnumber=$1
linux_user=$2
linux_user=${linux_user:-ubuntu}


#CPU variables
test_duration=5


	cpu_idle=$(sudo -u $linux_user ssh -o StrictHostKeyChecking=no $ipnumber mpstat $test_duration 1 | tail -1 |awk '{print int($12)}')
	cpuusage=$(echo 100 - $cpu_idle | bc)
	cpuusage=$(echo ${cpuusage%,*})
	
	check_cpu=$cpuusage
	
	echo "$(sudo -u $linux_user ssh -o StrictHostKeyChecking=no $ipnumber top -b -n 1 | head -n 17)"
	
	printf "$1 is using $cpuusage%% of CPU\n"

}

function ping_url () {
#Example: ping_url "My Site Friendly Name" https://mysite.com

sitename=$1
url2check=$2


#PING url variables
connecttimeout=20

echo 
echo Testing $1

response_code=`curl --insecure --write-out %{http_code} --silent --connect-timeout $connecttimeout --no-keepalive --output /dev/null  $url2check`

ping_url=$response_code 
  
  if [ "$response_code" != "200" ] && [ "$response_code" != "401" ] && [ "$response_code" != "301" ] && [ "$response_code" != "302" ] ; then

			printf "$1 is *** OFFLINE *** \n"
            false
  else
  	printf "$1 is ONLINE ($response_code)\n"
    echo ""
  fi;

}

function check_hdd_free_space() {

#Example: check_hdd_free_space "Wordpress" 192.168.0.1 /

instancename=$1
hostip=$2
pathvolume=$3
linux_user=$4
linux_user=${linux_user:-ubuntu}


echo $instancename - $hostip

if [ "$hostip" = "localhost" ]; then
	
	check_hdd_free_space=$(df $pathvolume | grep -o "[0-9][0-9]"% |  grep -o "[0-9][0-9]")
else	
	check_hdd_free_space=$(ssh -o StrictHostKeyChecking=no -o LogLevel=error $linux_user@$hostip sudo df $pathvolume | grep -o "[0-9][0-9]"% |  grep -o "[0-9][0-9]" )
	#check_hdd_free_space=$(sudo -u $linux_user ssh -o StrictHostKeyChecking=no -o LogLevel=error $hostip df $pathvolume | grep -o "[0-9][0-9]"% |  grep -o "[0-9][0-9]" )
fi;	

printf "$check_hdd_free_space%%\n"

}

function check_ssl_expire() {
site=$1
PORT="443"

date --date="$(echo | openssl s_client -servername $site -connect $site:$PORT  2>/dev/null \
	| openssl x509 -noout -enddate | awk -F '=' '{print $NF}' )" --iso-8601
	
}

function run_hdd_clean_up () {

ipnumber=$1
linux_user=$2
linux_user=${linux_user:-ubuntu}

cmd_run="sudo apt-get -y clean && sudo apt-get -y autoclean && sudo apt-get -y autoremove"

if [ "$ipnumber" == "$ownip" ]  
    then
		eval $cmd_run
	else
      sudo -u $linux_user ssh -o LogLevel=error $ipnumber $cmd_run  
 fi
}

function check_hdd_biggest () {

#Ex: check_hdd_biggest 

ipnumber=$1
linux_user=$2
linux_user=${linux_user:-ubuntu}

findfiles="sudo find / -not -path '/mnt/*' -not -path '/proc/*' \
		-not -path '/swapfile/*' -size +20M  -type f  -exec du -h  {} + | sort -r -h"
findpaths="sudo du -hs /*  --exclude=/mnt/*  --exclude=/proc/* | sort -rh | head -10"

if [ "$ipnumber" == "$ownip" ]  
    then
		eval $findfiles
		eval $findpaths
	else
      sudo -u $linux_user ssh -o LogLevel=error $ipnumber $findfiles
      sudo -u $linux_user ssh -o LogLevel=error $ipnumber $findpaths
 fi
    
}

function run_hdd_deletions () {

folder=$1
filename=$2
days_expiration=$3

	sudo find $folder -type f -mtime +$(days_expiration) -name $filename -exec rm -f {} \;

}

function aws_expand_hdd () {

#to be used after resize image in instance-state-name
#Ex: aws_expand_hdd nvme0n1 nvme0n1p1
dev_name=$1
dev_partition=$2

	sudo apt install cloud-guest-utils
	lsblk
	df -h
	sudo growpart /dev/$dev_name 1
	sudo resize2fs /dev/$dev_partition

}

function run_reboot () {
#ex: run_reboot 127.0.0.1

ipnumber=$1
linux_user=$2
linux_user=${linux_user:-ubuntu}

cmd_run="sudo reboot"

if [ "$ipnumber" == "$ownip" ]  
    then
		sudo $cmd_run
	else
      sudo -u $linux_user ssh -o LogLevel=error $ipnumber $cmd_run
 fi
}

function time_download () {
#usage time_download https://mysite.com/myfile.txt 5
#$1 file, $2 times to test or leave empty for 10 times

file=$1
times=${times:-10}

average=0
for i in $(seq $times); do
	newvalue=$(curl -o /dev/null --http1.1 -sS -w %{time_total}\\n  $file ) 
	newvalue=$(echo $newvalue |  sed -e "s/,/./g")
	average=$(echo "scale=3;$average + $newvalue" | bc)
done
echo $file
echo "scale=3;$average / $times" | bc

}

function time_load_site (){

site=$1

time_load_site=$(time wget --debug --verbose --directory-prefix=/tmp -erobots=off --output-file=/tmp/logfile.txt --page-requisites --no-cache --delete-after --level=inf --span-hosts --restrict-file-names=nocontrol --no-iri $site)


echo $time_load_site


# Explained
#https://www.computerhope.com/unix/wget.htm
#wget \
#	-r --recursive \ # Download the whole site. \ 
#   -p --page-requisites \ # Get all assets/elements (CSS/JS/images).
#	--spider stops wget from downloading the page.
#	-nd, short for --no-directories, prevents wget from creating a hierarchy of directories on your server.
#   -H --span-hosts \ # Include necessary assets from offsite as well.
#    --convert-links \ # Update links to still work in the static version.
#    --domains yoursite.com \ # Do not follow links outside this domain.
#	-nv, --no-verbose, stops wget from outputting extra information that is unnecessary for identifying broken links.
#    --no-parent \ # Don't follow links outside the directory you pass in.
#         yoursite.com/whatever/path # The URL to download
#	-l 1 is short for --level. By default, wget crawls up to five levels deep from the initial URL, but here we set it to one.
#	-w 2, short for --wait, instructs wget to wait 2 seconds between requests to avoid bombarding the server, minimizing any performance impact.

}

function site_links () {
site=$1
wget --spider --no-cache --recursive --no-verbose --output-file=$site.log $site
cat $site.log | grep -o 'http[^"]*' | sort | uniq
}

function jenkins_update () {

cd /tmp
sudo rm -f jenkins.war
#wget http://mirrors.jenkins.io/war-stable/2.319.1/jenkins.war
wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war
sudo cp /usr/share/jenkins/jenkins.war /home/ubuntu/jenkins.war.bak
sudo cp /tmp/jenkins.war /usr/share/jenkins/jenkins.war

}

function manychat_add_subscriber() {

#primeira tentativa
retorno=$(curl -s -X POST "https://api.manychat.com/fb/subscriber/createSubscriber" -H  "accept: application/json" \
-H  "Authorization: Bearer $MANYCHAT_TOKEN" -H  "Content-Type: application/json" \
-d "{\"first_name\":$1,\"last_name\":\"\",\"phone\":\"\",\"whatsapp_phone\":$2,\"email\":\"\",\"gender\":\"string\",\"has_opt_in_sms\":true,\"has_opt_in_email\":true,\"consent_phrase\":\"string\"}")

ret_status=$(echo $retorno | jq .status)
ret_msg=$(echo $retorno | jq .details.messages.whatsapp_phone.message | grep -oP '(?<=\").*?(?=\")')
ret_id=$(echo $retorno | jq .data.id)
ret_whatsapp=$(echo $retorno | jq .data.whatsapp_phone)

	if [ "$ret_msg" = 'Phone number has invalid format' ]  ; then
		
		#qtde caracteres do telefone
		lenzap=$(echo -n $2 | wc -m)
		
		if [ "$lenzap" -lt "13" ]; then
			#adiciona um 9 na posição 5
			whatsapp2=$(echo $2 | sed 's/./&9/4')
			
			#segunda tentativa
			retorno=$(curl -s -X POST "https://api.manychat.com/fb/subscriber/createSubscriber" -H  "accept: application/json" \
			-H  "Authorization: Bearer $MANYCHAT_TOKEN" -H  "Content-Type: application/json" \
			-d "{\"first_name\":$1,\"last_name\":\"\",\"phone\":\"\",\"whatsapp_phone\":$whatsapp2,\"email\":\"\",\"gender\":\"string\",\"has_opt_in_sms\":true,\"has_opt_in_email\":true,\"consent_phrase\":\"string\"}")

			ret_status=$(echo $retorno | jq .status)
			ret_msg=$(echo $retorno | jq .details.messages.whatsapp_phone.message | grep -oP '(?<=\").*?(?=\")')
			ret_id=$(echo $retorno | jq .data.id)
			ret_whatsapp=$(echo $retorno | jq .data.whatsapp_phone)

		fi

	fi

echo nome:$nome ret_status:$ret_status ret_id:$ret_id ret_msg:$ret_msg ret_whatsapp:$ret_whatsapp 

}

function manychat_set_custom_field () {

# como usar:
# manychat_set_custom_field "codigo_contato" "tipo_conteudo" "valor_conteudo"
# ex: manychat_set_custom_field "1582121" "servico" "true"
		
	
	curl -X POST "https://api.manychat.com/fb/subscriber/setCustomField" -H  "accept: application/json" -H  "Authorization: Bearer $MANYCHAT_TOKEN" -H  "Content-Type: application/json" \
	-d "{\"subscriber_id\":$1,\"field_id\":$2,\"field_value\":$3}"
}

function manychat_send_flow () {

	curl -X POST "https://api.manychat.com/fb/sending/sendFlow" -H  "accept: application/json" -H  "Authorization: Bearer $MANYCHAT_TOKEN" -H  "Content-Type: application/json" \
	-d "{\"subscriber_id\":$1,\"flow_ns\":\"$2\"}"
}

function botconversa_add_subscriber () {
#Ex: botconversa_add_subscriber "+559281303000" "Antonio Morais Pereira"

ret_whatsapp=$1
nome=$2

#obtem nome e coloca a primeira letra maiúscula
primeiro_nome="$(echo $nome | awk -F' ' '{print $1}' |  tr '[:upper:]' '[:lower:]' | sed 's/.*/\u&/' )"
resto_nome="$(echo $nome |  cut -d' ' -f2-)"

botconversa_num_whatsapp $ret_whatsapp

retorno=$(curl -X POST "https://backend.botconversa.com.br/api/v1/webhook/subscriber/" -H "accept: application/json" -H "API-KEY: $BOTCONVERSA_APIKEY" -H "Content-Type: application/json" \
-d "{ \"phone\": \"$ret_whatsapp\", \"first_name\": \"$primeiro_nome\", \"last_name\": \"$resto_nome\"}")

ret_msg=$(echo $retorno | jq .error_message)

ret_id=$(curl -X GET "https://backend.botconversa.com.br/api/v1/webhook/subscriber/$ret_whatsapp/" -H "accept: application/json" -H "API-KEY: $BOTCONVERSA_APIKEY" | jq .id)

if [[ ! $ret_id ]]; then
	ret_status="error"
else
	ret_status="success"
fi

echo nome: $nome ret_status:$ret_status ret_id=$ret_id ret_msg:$ret_msg ret_whatsapp:$ret_whatsapp 

}

function botconversa_send_flow () {
#Ex: botconversa_send_flow 123 852

ret_id=$1 
flow=$2

curl -X POST "https://backend.botconversa.com.br/api/v1/webhook/subscriber/$ret_id/send_flow/" -H "accept: application/json" -H "API-KEY: $BOTCONVERSA_APIKEY" -H "Content-Type: application/json" \
-d "{ \"flow\": $flow}"

}

function botconversa_set_custom_field () {
#Ex: botconversa_set_custom_field $ret_id $cod_email $email

ret_id=$1 
cod_custom_field=$2
value_custom_field=$3

curl -X POST "https://backend.botconversa.com.br/api/v1/webhook/subscriber/$ret_id/custom_fields/$cod_custom_field/" -H "accept: application/json" -H "API-KEY: $BOTCONVERSA_APIKEY"  -H "Content-Type: application/json" \
-d "{\"value\":\"$value_custom_field\"}"


}

function botconversa_set_tag () {
#Ex: botconversa_set_tag $ret_id $cod_tag 

ret_id=$1 
cod_tag=$2

curl -X POST "https://backend.botconversa.com.br/api/v1/webhook/subscriber/$ret_id/tags/$cod_tag/" -H "accept: application/json" \
-H "API-KEY: $BOTCONVERSA_APIKEY" -H "Content-Type: application/json" -d "{}"

}

function botconversa_get_id () {
#Ex: botconversa_set_tag $phone 

phone=$1 

retorno=$(curl -X GET "https://backend.botconversa.com.br/api/v1/webhook/subscriber/$phone/" -H "accept: application/json" -H "API-KEY: $BOTCONVERSA_APIKEY")

ret_id=$(echo $retorno | jq .id)

}

function botconversa_num_whatsapp () {
#Ex: botconversa_num_whatsapp 21968077564

ret_whatsapp=$1

#se o DDD for de 11 a 28, 14 digitos. Se for >28 whatsapp com 13 digitos.
ddd=$(echo $ret_whatsapp | cut -c4-5)

#tamanho telefone whatsapp 
tam_whatsapp=${#ret_whatsapp}

if  [ $ddd -le 28 ]; then
	if [ $tam_whatsapp -eq 13 ]; then 
		#adiciona um 9 após a posição 5
		ret_whatsapp=$(echo $ret_whatsapp | sed 's/./&9/5')
		echo "9 adicionado"
	fi
else 
	if [ $tam_whatsapp -eq 14 ]; then 
		#remove o 9 na posição 6
		ret_whatsapp=$(echo $ret_whatsapp | cut -c 1-5,7-99)
		echo "9 removido"
	fi
 
fi


}

function trello_add_label () {
#Ex: trello_add_label $card_id $label_id

card_id=$1
label_id=$2

key=$TRELLO_API_KEY
token=$TRELLO_API_TOKEN


url=https://api.trello.com/1/cards/$card_id/idLabels?value=$label_id

	curl --request POST \
	--header "Content-Type: application/json" \
	--data "{ \"key\": \"$key\", \"token\": \"$token\" }" \
	--url $url
 
}































